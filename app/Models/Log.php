<?php

namespace App\Models;

use App\Models\Scopes\BusinessScope;
use Backpack\CRUD\app\Models\Traits\CrudTrait;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Log extends Model
{
    use CrudTrait;
    use HasFactory;


    public static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::addGlobalScope(new BusinessScope);
    }

    /*
    |--------------------------------------------------------------------------
    | GLOBAL VARIABLES
    |--------------------------------------------------------------------------
    */

    protected $table = 'logs';
    // protected $primaryKey = 'id';
    // public $timestamps = false;
    protected $guarded = ['id'];
    // protected $fillable = [];
    // protected $hidden = [];
    // protected $dates = [];
    protected $casts = ["students" => 'json'];

    /*
    |--------------------------------------------------------------------------
    | FUNCTIONS
    |--------------------------------------------------------------------------
    */
    public function miniVideo()
    {
        return json_decode($this->video)->url;
    }

    public function setAttachmentsAttribute($value)
    {
        $attribute_name = "attachments";
        $disk = "public";
        $destination_path = "/uploads";

        $this->uploadFileToDisk($value, $attribute_name, $disk, $destination_path, $fileName = $value->getClientOriginalName());

        return $this->attributes["attachments"] = route("download", ['url' => $value->getClientOriginalName()]); // uncomment if this is a translatable field
    }

    /*
    |--------------------------------------------------------------------------
    | RELATIONS
    |--------------------------------------------------------------------------
    */
    public function Grade()
    {
        return $this->belongsTo(Grade::class, "grade_id", "id");
    }

    public function Teacher()
    {
        return $this->belongsTo(Teacher::class, "teacher_id", "id");
    }

    public function frequency()
    {
        $total = $this->Grade()->first()->Students()->count();
        $students = ($this->students);
        if ($students != null) {
            $alive = count($students);
        } else {
            $alive = 0;
        }
        return '<div class="text-center bg-primary p-1 rounded">' . $alive . "/" . $total . '</div>';
    }

    public function IsPresent($id): bool
    {
        $user = Student::find($id);
        if ($user->role != "student") {
            return false;
        }
        $frequency = $this->students;
        $studentList = $this->Grade()->first()->Students()->get(["users.id"])->pluck("id")->toArray();
        if (!in_array($user->id, $studentList)) {
            return false;
        }
        foreach ($frequency as $person) {
            if ($person["name"] == $user->name) {
                if ($person["present"] == 1) {
                    return true;
                }
            }
        }
        return false;
    }
    /*
    |--------------------------------------------------------------------------
    | SCOPES
    |--------------------------------------------------------------------------
    */

    /*
    |--------------------------------------------------------------------------
    | ACCESSORS
    |--------------------------------------------------------------------------
    */

    /*
    |--------------------------------------------------------------------------
    | MUTATORS
    |--------------------------------------------------------------------------
    */
}
